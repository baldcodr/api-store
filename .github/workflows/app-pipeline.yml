name: Build and Deploy to GKE

on:
  push:
    branches:
    - main
    paths:
    - api/**
  pull_request:
    branches:
    - main
    paths:
    - api/**

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-central2
  GKE_CLUSTER: ${{ secrets.GKE_PROJECT }}-gke
  GKE_ZONE: europe-central2-b
  DEPLOYMENT_NAME: api-store-ci 
  REPOSITORY: api-store-repo
  IMAGE: api-store-image
  IMAGE_TAG: latest
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        install_components: 'gke-gcloud-auth-plugin'
      
    - name: Docker and GKE auth configuration
      run: |-
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        use_auth_provider: true

    - name: Prebuild test
      run: |-
        pip install pytest pydantic mock-firestore
        pytest .

    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$IMAGE_TAG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$IMAGE_TAG"
    # Set up kustomize
    - name: Set up Kustomize and Deploy
      run: |-
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone $GKE_ZONE
        cd deploy/
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        kustomize edit set image api-store-image=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$IMAGE_TAG
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide